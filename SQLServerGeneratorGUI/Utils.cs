using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SQLServerGeneratorGUI
{
    public class Utils
    {

        public static List<string> GetDatabaseList(string server, string user, string pw)
        {
            try
            {
                List<string> list = new List<string>();

                // Open connection to the database
                string conString = $"server={server};uid={user};pwd={pw}; database=master";

                using (SqlConnection con = new SqlConnection(conString))
                {
                    con.Open();

                    // Set up a command with the given query and associate
                    // this with the current connection.
                    using (SqlCommand cmd = new SqlCommand("SELECT name from sys.databases", con))
                    {
                        using (IDataReader dr = cmd.ExecuteReader())
                        {
                            while (dr.Read())
                            {
                                list.Add(dr[0].ToString());
                            }
                        }
                    }
                }
                return list;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public static List<GridViewItem> GetSPandFunctions(string server, string user, string pw, string db)
        {
            List<GridViewItem> list = new List<GridViewItem>();

            // Open connection to the database
            string conString = $"server={server};uid={user};pwd={pw}; database={db}";

            using (SqlConnection con = new SqlConnection(conString))
            {
                con.Open();

                // Set up a command with the given query and associate
                // this with the current connection.
                using (SqlCommand cmd = new SqlCommand("SELECT o.name, definition, type_desc, s.name FROM sys.sql_modules m INNER JOIN sys.objects o  ON m.object_id=o.object_id INNER JOIN sys.schemas s  ON o.schema_id= s.schema_id WHERE type_desc like '%procedure%' OR  type_desc like '%function%' order by s.name ,o.name ", con))
                {
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            list.Add(new GridViewItem()
                            {
                                Name = dr[0].ToString(),
                                Type = dr[2].ToString(),
                                Schema = dr[3].ToString(),
                                Generate = false
                            });
                        }
                    }
                }
            }
            return list;
        }

        public static List<string> GetResultOfFunction(string name, string cs)
        {
            var query = $"EXEC sp_helptext '{name}'";

            List<string> result = new List<string>();
            using (SqlConnection mConnection = new SqlConnection(cs))
            {
                mConnection.Open();
                using (SqlCommand cmd = new SqlCommand(query, mConnection))
                {
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            result.Add((string)reader[0]);
                        }
                    }
                }
            }

            return result;
        }

        public static List<string> GetListToSave(List<string> data, string queryname, string db, string username)
        {
            var split = queryname.Split('.');
            var drop = data[1].Contains("FUNCTION") || data[0].Contains("FUNCTION") ? "FUNCTION " : "PROCEDURE";
            var header = $"-- ========================================================================================== {Environment.NewLine}" +
                $"-- This routine has been autogenerated {Environment.NewLine}" +
                $"-- Source code for this tool is at https://github.com/emimontesdeoca/sql-script-generator-gui {Environment.NewLine}" +
                $"-- Source query: {queryname}{Environment.NewLine}" +
                $"-- Create date: {DateTime.Now}{Environment.NewLine}" +
                $"-- Database: {db}{Environment.NewLine}" +
                $"-- User: {username}{Environment.NewLine}" +
                $"-- ========================================================================================== {Environment.NewLine}";
            var template = $"{header} IF EXISTS {Environment.NewLine} (SELECT * FROM Information_schema.Routines R WHERE R.ROUTINE_NAME " +
                $"= '{split[1]}' AND R.ROUTINE_SCHEMA = '{split[0]}') {Environment.NewLine} DROP {drop} [{split[0]}].[{split[1]}] {Environment.NewLine} GO{Environment.NewLine}";

            data.Insert(0, template);
            data.Add($"{Environment.NewLine}GO{Environment.NewLine}");

            return data;
        }


        public static void SaveToFile(string path, List<string> data)
        {
            System.IO.File.WriteAllText(path, string.Join("", data.ToArray()));
        }

        public class GridViewItem
        {
            public string Schema { get; set; }
            public string Name { get; set; }
            public string Type { get; set; }
            public bool Generate { get; set; }
        }
    }


}
